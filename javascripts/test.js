// alert("경고 알림 기능 입니다.(브라우저 전용함수 입니다.)");

// console.log("asdasd");

// ------------------------------------------------------------

//▄▄▄▄▄▄▄▄ let 으로 선언 되어진 변수는 다음과 같은 특징을 가진다. ▄▄▄▄▄▄▄▄▄▄

//   1.중간에 값을 변경하면 오류가 나온다.
//   2. 바꾸고 싶다면 let을 빼고 재선언을 하면 된다.
//   3. 변수에 let을 붙힘으로써 변수의 중복사용에 대한 오류를 예방가능하다.

// let A = "String";

// console.log(A);

// let A = "String2"

// console.log(A);

// 다음과 같은 경우에는 let으로 선언을 하였어도 변경이 가능하다.

// let A = "String";
// console.log("A");
// A = "String2"
// console.log(A);


// ◢ ◣정리◢ ◣: 

//   웬만하면 const로 선언을 하고 추후에 변경 가능성 있는 변수를 let으로 바꿔사용하자
// --------------------------------------------------

// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄템플릿 리터럴▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
    
//     1. 백틱 으로 감싸서 "문자열" 을 쉽게 출력을해준디.
//     2. 백틱안에 감싸진 변수는 "문자열"로 변환이 되어 인식이된다

// const A = 2;
// console.log(typeof `${A}`); // 타입은 당연히 string으로 나온다.


// --------------------------------------------------

// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄alert, prompt, confirm▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

  // 1. alert: 경고, 알림을 나타내는 브라우저 함수이다.

    // const name = prompt("입력창이 나오고 아래 입력을 하면 변수에 값이 들어간다");
    // alert("환영합니다"+name+"님");

  // 2. prompt: scanner처럼 입력을 받을 수 있다.

    // const name = prompt("입력 안내멘트","입력 형식 세팅")


  // 3. confirm: alert처럼 경고? 알람이 뜨는데 "확인","취소" 버튼을 누를 수 있다.
        // -확인, 취소에 따라 false, True 값으로 나옴
          
    // const confirmtest=confirm("당신은 성인 입니까?(확인, 취소)");
    // console.log(confirmtest);

// ◢ ◣◢ ◣정리:◢ ◣◢ ◣
  // 1. 위 형태로 입력을 받으면 문자형으로 입력이 받아진다.
  // 2. 추후 연산이 필요하다면 명시적으로 형변환을 해서 사용해주는게 좋을거 같다.

// ◢ ◣◢ ◣◢ ◣단점◢ ◣◢ ◣◢ ◣
  // 1. 스크립트 일시 정리. -> 창이 떠 있는 동안 다른 작업이 불가능하다
  // 2. 스타일링 불가능 -> 위치도 자기 멋대로 되어 있으므로 스타일링이 불가능

// --------------------------------------------------------------------------
//▄▄▄▄▄▄▄▄ 연산자(동등 연산자, 일치 연산자) ▄▄▄▄▄▄▄▄▄▄
  
     // ▄ 동등 연산자 ==  ▄

// let A = 10;
// let B = "10";

// console.log(A==B);
// console.log(B==10);

// 1. 변수의 자료형에 상관없이 =가 2개가 있으면 내용만 비교 해줌.
// 2. A 는 정수, B는 문자이지만 콘솔의 값은 True 가 뜸
     
    // ▄ 일치 연산자 ==  ▄

// let A = 10;
// let B = "10";

// console.log(A===B);
// console.log(B===10);

// 1. 변수의 자료형까지 비교해주는 점에서 동등 연산자와 차이가 있음
// 2. = 가 3개가 들어김

// 정리:
// 아무래도 일치 연산자를 쓰는게 추후에 버그가 발생했을때 식별하기 좋을거 같고, 웬만해서는 일치 연산자를 사용하는게 좋을거 같다.

